---
# Copyright 2018 widdix GmbH
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
AWSTemplateFormatVersion: '2010-09-09'
Description: 'Static Website: combining S3, CloudFront and Route53, a cloudonaut.io template'
Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
    - Label:
        default: 'Parent Stacks'
      Parameters:
      - ParentZoneStack
    - Label:
        default: 'Lambda@Edge Parameters'
      Parameters:
      - LambdaEdgeSubdirectoriesVersionArn
    - Label:
        default: 'CloudFront Parameters'
      Parameters:
      - DefaultRootObject
      - DefaultErrorPagePath
    - Label:
        default: 'DNS Parameters'
      Parameters:
      - SubDomainNameWithDot
      - EnableRedirectSubDomainName
      - RedirectSubDomainNameWithDot
    - Label:
        default: 'SSL/TLS Parameters'
      Parameters:
      - CertificateType
      - ExistingCertificate
Parameters:
  ParentZoneStack:
    Description: 'Stack name of parent zone stack based on vpc/zone-*.yaml template.'
    Type: String
  SubDomainNameWithDot:
    Description: 'Primary mame that is used to create the DNS entry with trailing dot, e.g. ${SubDomainNameWithDot}${HostedZoneName}. Leave blank for naked (or apex and bare) domain.'
    Type: String
    Default: 'www.'
  LambdaEdgeSubdirectoriesVersionArn:
    Description: 'Optional version ARN of Lambda@Edge function based on static-website/lambdaedge-index-document.yaml template and exposed as output LambdaVersionArn.'
    Type: String
    Default: ''
  DefaultRootObject:
    Description: 'The name of the index document for the website (ignored when LambdaEdgeSubdirectoriesVersionArn is set).'
    Type: String
    Default: 'index.html'
  DefaultErrorPagePath:
    Description: 'The path of the error page for the website (e.g. /error.html).'
    Type: String
    Default: ''
  EnableRedirectSubDomainName:
    Description: 'Sometimes, you want one (sub)domain to redirect to the primary name. E.g., if your primary website is www.widdix.net, you want widdix.net to redirect to www.widdix.net.'
    Type: String
    Default: 'false'
    AllowedValues: ['true', 'false']
  RedirectSubDomainNameWithDot:
    Description: 'Optional name that is used to create the DNS entry with trailing dot, e.g. ${RedirectSubDomainNameWithDot}${HostedZoneName}. Leave blank for naked (or apex and bare) domain.'
    Type: String
    Default: ''
  CertificateType:
    Description: 'Indicates whether to use the certificate from the AWS Certificate Manager or AWS Identity and Access Management. CreateAcmCertificate only works in the us-east-1 region!'
    Type: String
    Default: IamCertificateId
    AllowedValues:
    - AcmCertificateArn
    - IamCertificateId
    - CreateAcmCertificate
  ExistingCertificate:
    Description: 'Optional ACM Certificate ARN or IAM Certificate ID. Certificate must be created in the us-east-1 region!'
    Type: String
    Default: ''
Conditions:
  HasRedirectDomainName: !Equals [!Ref EnableRedirectSubDomainName, 'true']
  HasAcmCertificateArn: !Equals [!Ref CertificateType, 'AcmCertificateArn']
  HasIamCertificateId: !Equals [!Ref CertificateType, 'IamCertificateId']
  HasCreateAcmCertificate: !Equals [!Ref CertificateType, 'CreateAcmCertificate']
  HasLambdaEdgeSubdirectoriesVersionArn: !Not [!Equals [!Ref LambdaEdgeSubdirectoriesVersionArn, '']]
  HasDefaultErrorPagePath: !Not [!Equals [!Ref DefaultErrorPagePath, '']]
Resources:
  Certificate:
    Condition: HasCreateAcmCertificate
    Type: 'AWS::CertificateManager::Certificate'
    Properties:
      DomainName: !Sub
      - '${SubDomainNameWithDot}${HostedZoneName}'
      - SubDomainNameWithDot: !Ref SubDomainNameWithDot
        HostedZoneName: {'Fn::ImportValue': !Sub '${ParentZoneStack}-HostedZoneName'}
      DomainValidationOptions: !If
      - HasRedirectDomainName
      - - DomainName: !Sub
          - '${SubDomainNameWithDot}${HostedZoneName}'
          - SubDomainNameWithDot: !Ref SubDomainNameWithDot
            HostedZoneName: {'Fn::ImportValue': !Sub '${ParentZoneStack}-HostedZoneName'}
          ValidationDomain: !Sub
          - '${SubDomainNameWithDot}${HostedZoneName}'
          - SubDomainNameWithDot: !Ref SubDomainNameWithDot
            HostedZoneName: {'Fn::ImportValue': !Sub '${ParentZoneStack}-HostedZoneName'}
        - DomainName: !Sub
          - '${RedirectSubDomainNameWithDot}${HostedZoneName}'
          - RedirectSubDomainNameWithDot: !Ref RedirectSubDomainNameWithDot
            HostedZoneName: {'Fn::ImportValue': !Sub '${ParentZoneStack}-HostedZoneName'}
          ValidationDomain: !Sub
          - '${SubDomainNameWithDot}${HostedZoneName}'
          - SubDomainNameWithDot: !Ref SubDomainNameWithDot
            HostedZoneName: {'Fn::ImportValue': !Sub '${ParentZoneStack}-HostedZoneName'}
      - - DomainName: !Sub
          - '${SubDomainNameWithDot}${HostedZoneName}'
          - SubDomainNameWithDot: !Ref SubDomainNameWithDot
            HostedZoneName: {'Fn::ImportValue': !Sub '${ParentZoneStack}-HostedZoneName'}
          ValidationDomain: !Sub
          - '${SubDomainNameWithDot}${HostedZoneName}'
          - SubDomainNameWithDot: !Ref SubDomainNameWithDot
            HostedZoneName: {'Fn::ImportValue': !Sub '${ParentZoneStack}-HostedZoneName'}
      SubjectAlternativeNames: !If
      - HasRedirectDomainName
      - - !Sub
          - '${RedirectSubDomainNameWithDot}${HostedZoneName}'
          - RedirectSubDomainNameWithDot: !Ref RedirectSubDomainNameWithDot
            HostedZoneName: {'Fn::ImportValue': !Sub '${ParentZoneStack}-HostedZoneName'}
      - []
  S3Bucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Sub
      - '${SubDomainNameWithDot}${HostedZoneName}'
      - SubDomainNameWithDot: !Ref SubDomainNameWithDot
        HostedZoneName: {'Fn::ImportValue': !Sub '${ParentZoneStack}-HostedZoneName'}
  S3BucketPolicy:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket: !Ref S3Bucket
      PolicyDocument:
        Statement:
        - Action: 's3:GetObject'
          Effect: Allow
          Resource: !Sub 'arn:aws:s3:::${S3Bucket}/*'
          Principal:
            CanonicalUser: !GetAtt CloudFrontOriginAccessIdentity.S3CanonicalUserId
  CloudFrontOriginAccessIdentity:
    Type: 'AWS::CloudFront::CloudFrontOriginAccessIdentity'
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Sub
        - '${SubDomainNameWithDot}${HostedZoneName}'
        - SubDomainNameWithDot: !Ref SubDomainNameWithDot
          HostedZoneName: {'Fn::ImportValue': !Sub '${ParentZoneStack}-HostedZoneName'}
  CloudFrontDistribution:
    Type: 'AWS::CloudFront::Distribution'
    Properties:
      DistributionConfig:
        Aliases: !If
        - HasRedirectDomainName
        - - !Sub
            - '${SubDomainNameWithDot}${HostedZoneName}'
            - SubDomainNameWithDot: !Ref SubDomainNameWithDot
              HostedZoneName: {'Fn::ImportValue': !Sub '${ParentZoneStack}-HostedZoneName'}
          - !Sub
            - '${RedirectSubDomainNameWithDot}${HostedZoneName}'
            - RedirectSubDomainNameWithDot: !Ref RedirectSubDomainNameWithDot
              HostedZoneName: {'Fn::ImportValue': !Sub '${ParentZoneStack}-HostedZoneName'}
        - - !Sub
            - '${SubDomainNameWithDot}${HostedZoneName}'
            - SubDomainNameWithDot: !Ref SubDomainNameWithDot
              HostedZoneName: {'Fn::ImportValue': !Sub '${ParentZoneStack}-HostedZoneName'}
        Comment: !Sub
        - '${SubDomainNameWithDot}${HostedZoneName}'
        - SubDomainNameWithDot: !Ref SubDomainNameWithDot
          HostedZoneName: {'Fn::ImportValue': !Sub '${ParentZoneStack}-HostedZoneName'}
        CustomErrorResponses: !If
        - HasDefaultErrorPagePath
        - - ErrorCode: 403 # not found
            ResponseCode: 404
            ResponsePagePath: !Ref DefaultErrorPagePath
        - []
        DefaultCacheBehavior:
          AllowedMethods:
          - GET
          - HEAD
          - OPTIONS
          CachedMethods:
          - GET
          - HEAD
          - OPTIONS
          Compress: true
          DefaultTTL: 3600 # in seconds
          ForwardedValues:
            Cookies:
              Forward: none
            QueryString: false
          LambdaFunctionAssociations: !If
          - HasLambdaEdgeSubdirectoriesVersionArn
          - - EventType: 'viewer-request'
              LambdaFunctionARN: !Ref LambdaEdgeSubdirectoriesVersionArn
            - EventType: 'origin-request'
              LambdaFunctionARN: !Ref LambdaEdgeSubdirectoriesVersionArn
          - []
          MaxTTL: 86400 # in seconds
          MinTTL: 60 # in seconds
          TargetOriginId: s3origin
          ViewerProtocolPolicy: 'redirect-to-https'
        DefaultRootObject: !If [HasLambdaEdgeSubdirectoriesVersionArn, !Ref 'AWS::NoValue', !Ref DefaultRootObject]
        Enabled: true
        HttpVersion: http2
        Origins:
        - DomainName: !GetAtt 'S3Bucket.DomainName'
          Id: s3origin
          S3OriginConfig:
            OriginAccessIdentity: !Sub 'origin-access-identity/cloudfront/${CloudFrontOriginAccessIdentity}'
        PriceClass: 'PriceClass_All'
        ViewerCertificate:
          AcmCertificateArn: !If [HasCreateAcmCertificate, !Ref Certificate, !If [HasAcmCertificateArn, !Ref ExistingCertificate, !Ref 'AWS::NoValue']]
          IamCertificateId: !If [HasIamCertificateId, !Ref ExistingCertificate, !Ref 'AWS::NoValue']
          MinimumProtocolVersion: 'TLSv1.1_2016'
          SslSupportMethod: 'sni-only'
  Route53RecordV2:
    Type: 'AWS::Route53::RecordSetGroup'
    Properties:
      HostedZoneId: {'Fn::ImportValue': !Sub '${ParentZoneStack}-HostedZoneId'}
      RecordSets:
      - Name: !Sub
        - '${SubDomainNameWithDot}${HostedZoneName}'
        - SubDomainNameWithDot: !Ref SubDomainNameWithDot
          HostedZoneName: {'Fn::ImportValue': !Sub '${ParentZoneStack}-HostedZoneName'}
        Type: A
        AliasTarget:
          HostedZoneId: Z2FDTNDATAQYW2 # Magic CloudFront number
          DNSName: !GetAtt 'CloudFrontDistribution.DomainName'
  Route53RecordRedirectV2:
    Condition: HasRedirectDomainName
    Type: 'AWS::Route53::RecordSetGroup'
    Properties:
      HostedZoneId: {'Fn::ImportValue': !Sub '${ParentZoneStack}-HostedZoneId'}
      RecordSets:
      - Name: !Sub
        - '${RedirectSubDomainNameWithDot}${HostedZoneName}'
        - RedirectSubDomainNameWithDot: !Ref RedirectSubDomainNameWithDot
          HostedZoneName: {'Fn::ImportValue': !Sub '${ParentZoneStack}-HostedZoneName'}
        Type: A
        AliasTarget:
          HostedZoneId: Z2FDTNDATAQYW2 # Magic CloudFront number
          DNSName: !GetAtt 'CloudFrontDistribution.DomainName'
Outputs:
  TemplateID:
    Description: 'cloudonaut.io template id.'
    Value: 'static-website/static-website'
  TemplateVersion:
    Description: 'cloudonaut.io template version.'
    Value: '__VERSION__'
  StackName:
    Description: 'Stack name.'
    Value: !Sub '${AWS::StackName}'
  URL:
    Description: 'URL to static website.'
    Value: !Sub
    - 'https://${SubDomainNameWithDot}${HostedZoneName}'
    - SubDomainNameWithDot: !Ref SubDomainNameWithDot
      HostedZoneName: {'Fn::ImportValue': !Sub '${ParentZoneStack}-HostedZoneName'}
    Export:
      Name: !Sub '${AWS::StackName}-URL'
  DistributionId:
    Description: 'CloudFront distribution id'
    Value: !Ref CloudFrontDistribution
    Export:
      Name: !Sub '${AWS::StackName}-DistributionId'
