---
# Copyright 2018 widdix GmbH
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
AWSTemplateFormatVersion: '2010-09-09'
Description: 'Static Website: Index document support in subdirectories, a cloudonaut.io template'
Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
    - Label:
        default: 'Index document support Parameters'
      Parameters:
      - IndexDocument
      - DomainName
      - RedirectDomainName
    - Label:
        default: 'Operational Parameters'
      Parameters:
      - LogsRetentionInDays
Parameters:
  IndexDocument:
    Description: 'The name of the index document for the website.'
    Type: String
    Default: 'index.html'
  DomainName:
    Description: 'The primary domain name of the static website (e.g. widdix.de).'
    Type: String
  RedirectDomainName:
    Description: 'Optional domain name redirecting to DomainName (e.g. www.widdix.de).'
    Type: String
    Default: ''
  LogsRetentionInDays:
    Description: 'Specifies the number of days you want to retain log events in the specified log group.'
    Type: Number
    Default: 14
    AllowedValues: [1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1827, 3653]
Resources:
  LambdaRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - 'lambda.amazonaws.com'
            - 'edgelambda.amazonaws.com'
          Action: 'sts:AssumeRole'
      ManagedPolicyArns:
      - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
  LambdaFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        # If you change the ZipFile, rename the logical id LambdaVersionV3 to trigger a new version creation!
        ZipFile: !Sub |
          'use strict';
          const regex = /\.[a-z0-9]+$/;
          const indexDocument = '${IndexDocument}';
          const domainName = '${DomainName}'.toLowerCase();
          const redirectDomainName = '${RedirectDomainName}'.toLowerCase();
          exports.handler = (event, context, cb) => {
            const cf = event.Records[0].cf;
            const config = cf.config;
            const request = cf.request;
            if ('requestId' in config) { // viewer-request
              if (request.headers.host[0].value.toLowerCase() === redirectDomainName) {
                cb(null, {
                  status: '301',
                  statusDescription: 'Moved Permanently',
                  headers: {
                    location: [{
                      key: 'Location',
                      value: `https://${!domainName}${!request.uri}`,
                    }],
                  }
                });
              } else {
                cb(null, request);
              }
            } else {  // origin-request
              if (request.uri.endsWith('/')) {
                cb(null, Object.assign({}, request, {uri: `${!request.uri}${!indexDocument}`}));
              } else if (request.uri.endsWith(`/${!indexDocument}`)) {
                cb(null, {
                  status: '302',
                  statusDescription: 'Found',
                  headers: {
                    location: [{
                      key: 'Location',
                      value: request.uri.substr(0, request.uri.length - indexDocument.length),
                    }],
                  }
                });
              } else if (!regex.test(request.uri)) {
                cb(null, {
                  status: '302',
                  statusDescription: 'Found',
                  headers: {
                    location: [{
                      key: 'Location',
                      value: `${!request.uri}/`,
                    }],
                  }
                });
              } else {
                cb(null, request);
              }
            }
          };
      Handler: 'index.handler'
      MemorySize: 128
      Role: !GetAtt 'LambdaRole.Arn'
      Runtime: 'nodejs6.10'
      Timeout: 5
  LambdaLogGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: !Sub '/aws/lambda/${LambdaFunction}'
      RetentionInDays: !Ref LogsRetentionInDays
  LambdaVersionV3:
    Type: 'AWS::Lambda::Version'
    Properties:
      FunctionName: !Ref LambdaFunction
Outputs:
  TemplateID:
    Description: 'cloudonaut.io template id.'
    Value: 'static-website/lambdaedge-index-document'
  TemplateVersion:
    Description: 'cloudonaut.io template version.'
    Value: '__VERSION__'
  StackName:
    Description: 'Stack name.'
    Value: !Sub '${AWS::StackName}'
  LambdaVersionArn:
    Description: 'Version ARN of Lambda@Edge function.'
    Value: !Ref LambdaVersionV3
