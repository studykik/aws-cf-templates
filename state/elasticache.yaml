---
# Copyright 2018 widdix GmbH
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
AWSTemplateFormatVersion: '2010-09-09'
Description: 'State: ElastiCache Cluster (redis or memcached), a cloudonaut.io template, sponsored by https://github.com/ngault'
Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
    - Label:
        default: 'Parent Stacks'
      Parameters:
      - ParentVPCStack
      - ParentClientStack
      - ParentZoneStack
      - ParentSSHBastionStack
      - ParentAlertStack
    - Label:
        default: 'ElastiCache Parameters'
      Parameters:
      - Engine
      - CacheNodeType
      - NumCacheNodes
      - SubDomainName
Parameters:
  ParentVPCStack:
    Description: 'Stack name of parent VPC stack based on vpc/vpc-*azs.yaml template.'
    Type: String
  ParentClientStack:
    Description: 'Stack name of parent client stack based on state/client-sg.yaml template.'
    Type: String
  ParentZoneStack:
    Description: 'Optional stack name of parent zone stack based on vpc/vpc-zone-*.yaml template.'
    Type: String
    Default: ''
  ParentSSHBastionStack:
    Description: 'Optional but recommended stack name of parent SSH bastion host/instance stack based on vpc/vpc-ssh-bastion.yaml template.'
    Type: String
    Default: ''
  ParentAlertStack:
    Description: 'Optional but recommended stack name of parent alert stack based on operations/alert.yaml template.'
    Type: String
    Default: ''
  Engine:
    Type: String
    Default: redis
    AllowedValues:
    - redis
    - memcached
  CacheNodeType:
    Description: 'The compute and memory capacity of the nodes in the node group (shard).'
    Type: 'String'
    Default: 'cache.t2.micro'
  NumCacheNodes:
    Description: 'The initial number of cache nodes that the cluster has.'
    Type: 'Number'
    Default: 1
  SubDomainName:
    Description: 'Name that is used to create the DNS entry ${SubDomainName}.${HostedZoneName} (required when ParentZoneStack is set, otherwise not considered)'
    Type: String
    Default: cache
Conditions:
  HasZone: !Not [!Equals [!Ref ParentZoneStack, '']]
  HasSSHBastionSecurityGroup: !Not [!Equals [!Ref ParentSSHBastionStack, '']]
  HasAlertTopic: !Not [!Equals [!Ref ParentAlertStack, '']]
  HasSingleCacheNode: !Equals [!Ref NumCacheNodes, '1']
  HasEngineRedis: !Equals [!Ref Engine, "redis"]
  HasEngineMemcached: !Equals [!Ref Engine, "memcached"]
Resources:
  RecordSet:
    Condition: HasZone
    Type: 'AWS::Route53::RecordSet'
    Properties:
      HostedZoneId:
        'Fn::ImportValue': !Sub '${ParentZoneStack}-HostedZoneId'
      Name: !Sub
      - '${SubDomainName}.${HostedZoneName}'
      - SubDomainName: !Ref SubDomainName
        HostedZoneName:
          'Fn::ImportValue': !Sub '${ParentZoneStack}-HostedZoneName'
      ResourceRecords:
      - !If
        - HasEngineRedis
        - !GetAtt 'CacheCluster.RedisEndpoint.Address'
        - !GetAtt 'CacheCluster.ConfigurationEndpoint.Address'
      TTL: 60
      Type: CNAME
  CacheParameterGroupName:
    Type: 'AWS::ElastiCache::ParameterGroup'
    Properties:
      CacheParameterGroupFamily: !If
      - HasEngineRedis
      - 'redis3.2'
      - 'memcached1.4'
      Description: !Ref 'AWS::StackName'
      Properties: {}
  CacheSubnetGroupName:
    Type: 'AWS::ElastiCache::SubnetGroup'
    Properties:
      Description: !Ref 'AWS::StackName'
      SubnetIds: !Split
      - ','
      - 'Fn::ImportValue': !Sub '${ParentVPCStack}-SubnetsPrivate'
  SecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: !Ref 'AWS::StackName'
      VpcId:
        'Fn::ImportValue': !Sub '${ParentVPCStack}-VPC'
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: !If
        - HasEngineRedis
        - 6379
        - 11211
        ToPort: !If
        - HasEngineRedis
        - 6379
        - 11211
        SourceSecurityGroupId:
          'Fn::ImportValue': !Sub '${ParentClientStack}-ClientSecurityGroup'
  SecurityGroupInSSHBastion:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Condition: HasSSHBastionSecurityGroup
    Properties:
      GroupId: !Ref SecurityGroup
      IpProtocol: tcp
      FromPort: !If
      - HasEngineRedis
      - 6379
      - 11211
      ToPort: !If
      - HasEngineRedis
      - 6379
      - 11211
      SourceSecurityGroupId:
        'Fn::ImportValue': !Sub '${ParentSSHBastionStack}-SecurityGroup'
  CacheCluster:
    Type: 'AWS::ElastiCache::CacheCluster'
    Properties:
      AutoMinorVersionUpgrade: true
      AZMode: !If [HasSingleCacheNode, 'single-az', 'cross-az']
      CacheNodeType: !Ref CacheNodeType
      CacheParameterGroupName: !Ref CacheParameterGroupName
      CacheSubnetGroupName: !Ref CacheSubnetGroupName
      Engine: !Ref Engine
      EngineVersion: !If
      - HasEngineRedis
      - '3.2.10'
      - '1.4.34'
      NotificationTopicArn: !If [HasAlertTopic, {'Fn::ImportValue': !Sub '${ParentAlertStack}-TopicARN'}, !Ref 'AWS::NoValue']
      NumCacheNodes: !Ref NumCacheNodes
      PreferredMaintenanceWindow: 'sat:07:00-sat:08:00'
      VpcSecurityGroupIds:
      - !Ref SecurityGroup
  ClusterCPUUtilizationTooHighAlarm:
    Condition: HasAlertTopic
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmActions:
      - 'Fn::ImportValue': !Sub '${ParentAlertStack}-TopicARN'
      AlarmDescription: 'Average CPU utilization over last 10 minutes too high.'
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
      - Name: CacheClusterId
        Value: !Ref CacheCluster
      EvaluationPeriods: 1
      MetricName: CPUUtilization
      Namespace: 'AWS/ElastiCache'
      OKActions:
      - 'Fn::ImportValue': !Sub '${ParentAlertStack}-TopicARN'
      Period: 600
      Statistic: Average
      Threshold: 80
  ClusterSwapUsageTooHighAlarm:
    Condition: HasAlertTopic
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmActions:
      - 'Fn::ImportValue': !Sub '${ParentAlertStack}-TopicARN'
      AlarmDescription: 'Average swap usage over last 10 minutes too high, performance may suffer.'
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
      - Name: CacheClusterId
        Value: !Ref CacheCluster
      EvaluationPeriods: 1
      MetricName: SwapUsage
      Namespace: 'AWS/ElastiCache'
      OKActions:
      - 'Fn::ImportValue': !Sub '${ParentAlertStack}-TopicARN'
      Period: 600
      Statistic: Average
      Threshold: 256000000 # 256 Megabyte in Byte
  ClusterEvictionsTooHighAlarm:
    Condition: HasAlertTopic
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmActions:
      - 'Fn::ImportValue': !Sub '${ParentAlertStack}-TopicARN'
      AlarmDescription: 'Evictions over last 10 minutes too high, memory may to less for all keys.'
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
      - Name: CacheClusterId
        Value: !Ref CacheCluster
      EvaluationPeriods: 10
      MetricName: Evictions
      Namespace: 'AWS/ElastiCache'
      OKActions:
      - 'Fn::ImportValue': !Sub '${ParentAlertStack}-TopicARN'
      Period: 60
      Statistic: Sum
      Threshold: 1000
Outputs:
  TemplateID:
    Description: 'cloudonaut.io template id.'
    Value: 'state/elasticache'
  TemplateVersion:
    Description: 'cloudonaut.io template version.'
    Value: '__VERSION__'
  StackName:
    Description: 'Stack name.'
    Value: !Sub '${AWS::StackName}'
  ClusterName:
    Description: 'The name of the cluster'
    Value: !Ref CacheCluster
    Export:
      Name: !Sub '${AWS::StackName}-ClusterName'
  Engine:
    Description: 'The engine of the cluster (redis or memcached)'
    Value: !Ref Engine
    Export:
      Name: !Sub '${AWS::StackName}-Engine'
  DNSName:
    Description: 'he DNS address of the configuration endpoint for the cache cluster.'
    Value: !If
    - HasEngineRedis
    - !GetAtt 'CacheCluster.RedisEndpoint.Address'
    - !GetAtt 'CacheCluster.ConfigurationEndpoint.Address'
    Export:
      Name: !Sub '${AWS::StackName}-DNSName'
  EndpointAddress:
    Description: 'ElasticacheCluster endpoint address'
    Value: !If
    - HasEngineRedis
    - !GetAtt 'CacheCluster.RedisEndpoint.Address'
    - !GetAtt 'CacheCluster.ConfigurationEndpoint.Address'
    Export:
      Name: !Sub '${AWS::StackName}-EndpointAddress'
  EndpointPort:
    Description: 'ElasticacheCluster endpoint port'
    Value: !If
    - HasEngineRedis
    - !GetAtt 'CacheCluster.RedisEndpoint.Port'
    - !GetAtt 'CacheCluster.ConfigurationEndpoint.Port'
    Export:
      Name: !Sub '${AWS::StackName}-EndpointPort'
